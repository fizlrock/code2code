/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;
import java.util.stream.Stream;

import org.LabExecutor.Algoritms.SinglePass.AdaptHuffman.Task2;
import org.LabExecutor.Algoritms.SinglePass.AdaptHuffman.Task51;
import org.LabExecutor.Algoritms.SinglePass.LZXX.LZ77;
import org.LabExecutor.Executor.Lab3Executor;
import org.LabExecutor.Executor.Lab3Executor.Lab3Version;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

class AppTest {
  static List<Lab3Version> versions = Lab3Executor.loadVersions();

  @ParameterizedTest
  @MethodSource("lineToCodeProvider")
  void lz77CodeDecodeTest(String line) {
    var coder = new LZ77(10, 6);
    var decoder = new LZ77(10, 6);

    var code_report = coder.encode(line);
    assertNotEquals(null, code_report);
    var decode_report = decoder.decode(code_report.getResult());
    assertNotEquals(null, decode_report);

    assertEquals(line, decode_report.result());
  }
  @ParameterizedTest
  @MethodSource("lineLZ77DecodeProvider")
  void lz77DecodeTest(String line) {
    var decoder = new LZ77(10, 6);

    var decode_report = decoder.decode(line);
    assertTrue(decode_report != null);
    assertTrue(decode_report.result().isBlank());


  }

  @ParameterizedTest
  @MethodSource("lineToCodeProvider")
  void adaptHuffmanTest(String line) {
    var coded = new Task2(line).getReport().result();
    var actual = new Task51(coded).getReport().result();
    assertEquals(line, actual);
  }

  static Stream<String> lineToCodeProvider() {
    return versions.stream().map(Lab3Version::line2);
  }
  static Stream<String> lineLZ77DecodeProvider() {
    return versions.stream().map(Lab3Version::line5);
  }
}
